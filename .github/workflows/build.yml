name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CMAKE_GENERATOR: Ninja
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  MACOSX_DEPLOYMENT_TARGET: 10.15

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux-GCC
            os: ubuntu-22.04

          - name: Linux-Clang
            os: ubuntu-22.04

          - name: macOS-Clang
            os: macos-13

          - name: Windows-MSVC
            os: windows-latest

          - name: Windows-Clang
            os: windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          lfs: true

      - name: Install dependencies
        if: runner.os == 'Windows'
        run: choco install ninja ccache

      - name: Install dependencies
        if: runner.os == 'macOS'
        run: brew install ninja ccache

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: >
          sudo apt update -y &&
          sudo apt install -y
          ninja-build
          ccache
          libasound2-dev
          libjack-jackd2-dev
          ladspa-sdk
          libcurl4-openssl-dev
          libfreetype6-dev
          libx11-dev
          libxcomposite-dev
          libxcursor-dev
          libxcursor-dev
          libxext-dev
          libxinerama-dev
          libxrandr-dev
          libxrender-dev
          libwebkit2gtk-4.0-dev
          libglu1-mesa-dev
          mesa-common-dev

      - name: Set up Visual Studio shell
        if: matrix.name == 'Windows-MSVC'
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install clang
        if: matrix.name == 'Windows-Clang' || matrix.name == 'Linux-Clang'
        uses: egor-tensin/setup-clang@v1

      - name: Install ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: jml-build-${{ matrix.name }}

      - name: Install conan
        run: |
          pip install -U conan
          conan profile detect --force

      - name: CMake configure
        run: >
          cmake
          -S .
          -G "Ninja"
          -B build
          -D CMAKE_BUILD_TYPE=Release
          -D CMAKE_PROJECT_TOP_LEVEL_INCLUDES=external/cmake-conan/conan_provider.cmake

      - name: CMake build
        run: cmake --build build

      - name: CTest
        run: ctest --test-dir build -C Release --output-on-failure
